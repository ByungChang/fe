2019-11-05 08:51:43 [METHOD] - "/company"에 get실행
2019-11-05 08:51:43 [METHOD] - "/company"에 get실행완료
2019-11-05 08:51:45 [METHOD] - "/company/device"에 get실행
2019-11-05 08:51:45 [QUERY] - SELECT `id`, `name`, `firmVersion`, `isOn`, `createdAt`, `updatedAt` FROM `devices` AS `devices`;
2019-11-05 08:51:45 [METHOD] - "/company/device"에 get실행완료
2019-11-05 08:52:20 [METHOD] - "/company"에 post실행
2019-11-05 08:52:20 [QUERY] - INSERT INTO `companys` (`id`,`name`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?);
2019-11-05 08:52:20 [QUERY] - INSERT INTO `branchs` (`id`,`name`,`expiredDate`,`companyId`,`busNumber`,`isMain`,`tel`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?,?);
2019-11-05 08:52:20 [QUERY] - INSERT INTO `user_groups` (`id`,`name`,`groupAuth`,`branchId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?);
2019-11-05 08:52:20 [QUERY] - INSERT INTO `users` (`id`,`orgId`,`userNm`,`userPw`,`userYn`,`userGroupId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);
2019-11-05 08:52:20 [METHOD] - "/company"에 post실행완료
2019-11-05 08:52:20 [QUERY] - INSERT INTO `branch_devices` (`id`,`deviceId`,`location`,`branchId`,`descript`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
2019-11-05 08:52:20 [QUERY] - INSERT INTO `branch_devices` (`id`,`deviceId`,`location`,`branchId`,`descript`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
2019-11-05 08:52:20 [QUERY] - INSERT INTO `branch_devices` (`id`,`deviceId`,`location`,`branchId`,`descript`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?);
2019-11-05 08:52:22 [METHOD] - "/company"에 get실행
2019-11-05 08:52:22 [METHOD] - "/company"에 get실행완료
2019-11-05 08:52:24 [METHOD] - "/company/user"에 post실행
2019-11-05 08:52:24 [METHOD] - "/company/user"에 post실행완료
2019-11-05 08:52:27 [METHOD] - "/company/detail"에 post실행
2019-11-05 08:52:27 [METHOD] - "/company/detail"에 post실행완료
2019-11-05 08:52:34 [METHOD] - "/company"에 get실행
2019-11-05 08:52:34 [METHOD] - "/company"에 get실행완료
2019-11-05 08:52:37 [METHOD] - "/company/detail"에 post실행
2019-11-05 08:52:37 [METHOD] - "/company/detail"에 post실행완료
2019-11-05 08:52:39 [METHOD] - "/company/device"에 get실행
2019-11-05 08:52:39 [QUERY] - SELECT `id`, `name`, `firmVersion`, `isOn`, `createdAt`, `updatedAt` FROM `devices` AS `devices`;
2019-11-05 08:52:39 [METHOD] - "/company/device"에 get실행완료
2019-11-05 08:53:09 [METHOD] - "/company/user"에 post실행
2019-11-05 08:53:09 [METHOD] - "/company/user"에 post실행완료
2019-11-05 08:53:10 [METHOD] - "/company"에 get실행
2019-11-05 08:53:10 [METHOD] - "/company"에 get실행완료
2019-11-05 08:53:13 [METHOD] - "/company/detail"에 post실행
2019-11-05 08:53:13 [METHOD] - "/company/detail"에 post실행완료
2019-11-05 09:03:39 [METHOD] - "/"에 post실행
2019-11-05 09:03:39 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 09:03:39 [ERROR] - "/"에 signToken메소드 에러
2019-11-05 09:03:39 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 09:03:39 [ERROR] - "/"에 post에서 ERROR : Error: secretOrPrivateKey must have a value
2019-11-05 09:05:20 [METHOD] - "/"에 post실행
2019-11-05 09:05:20 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 09:05:20 [ERROR] - "/"에 signToken메소드 에러
2019-11-05 09:05:20 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 09:05:20 [ERROR] - "/"에 post에서 ERROR : Error: secretOrPrivateKey must have a value
2019-11-05 09:05:41 [METHOD] - "/"에 post실행
2019-11-05 09:05:41 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 09:05:41 [ERROR] - "/"에 signToken메소드 에러
2019-11-05 09:05:41 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 09:05:41 [ERROR] - "/"에 post에서 ERROR : Error: secretOrPrivateKey must have a value
2019-11-05 09:06:25 [METHOD] - "/"에 post실행
2019-11-05 09:06:25 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 09:06:25 [ERROR] - "/"에 signToken메소드 에러
2019-11-05 09:06:25 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 09:06:25 [ERROR] - "/"에 post에서 ERROR : Error: secretOrPrivateKey must have a value
2019-11-05 09:06:47 [METHOD] - "/"에 post실행
2019-11-05 09:06:47 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 09:06:47 [ERROR] - "/"에 signToken메소드 에러
2019-11-05 09:06:47 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 09:06:47 [ERROR] - "/"에 post에서 ERROR : Error: secretOrPrivateKey must have a value
2019-11-05 09:07:42 [METHOD] - "/"에 post실행
2019-11-05 09:07:42 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 09:07:42 [ERROR] - "/"에 signToken메소드 에러
2019-11-05 09:07:42 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 09:07:42 [ERROR] - "/"에 post에서 ERROR : Error: secretOrPrivateKey must have a value
2019-11-05 09:10:05 [METHOD] - "/"에 post실행
2019-11-05 09:10:05 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 09:10:05 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 09:10:05 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 09:10:05 [METHOD] - "/"에 post실행 완료
2019-11-05 09:10:43 [METHOD] - "/"에 post실행
2019-11-05 09:10:43 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 09:10:43 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 09:10:43 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 09:10:43 [METHOD] - "/"에 post실행 완료
2019-11-05 09:11:04 [METHOD] - "/"에 post실행
2019-11-05 09:11:04 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 09:11:04 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 09:11:04 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 09:11:04 [METHOD] - "/"에 post실행 완료
2019-11-05 09:22:47 [METHOD] - "/board"에 get실행
2019-11-05 09:22:47 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 09:22:47 [METHOD] - "/board"에 get실행완료
2019-11-05 09:23:28 [METHOD] - "/"에 post실행
2019-11-05 09:23:28 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 09:23:28 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 09:23:28 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 09:23:28 [METHOD] - "/"에 post실행 완료
2019-11-05 09:23:30 [METHOD] - "/board"에 get실행
2019-11-05 09:23:30 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 09:23:30 [METHOD] - "/board"에 get실행완료
2019-11-05 09:23:47 [METHOD] - "/board"에 get실행
2019-11-05 09:23:47 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 09:23:47 [METHOD] - "/board"에 get실행완료
2019-11-05 09:26:24 [METHOD] - "/board"에 get실행
2019-11-05 09:26:24 [ERROR] - "/board"에 없는 경로
2019-11-05 09:26:24 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 09:26:24 [METHOD] - "/board"에 get실행완료
2019-11-05 09:26:24 [ERROR] - "/board"에 get에서 ERROR : Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
2019-11-05 09:26:54 [METHOD] - "/"에 post실행
2019-11-05 09:26:54 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 09:26:54 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 09:26:54 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 09:26:54 [METHOD] - "/"에 post실행 완료
2019-11-05 09:26:55 [METHOD] - "/board"에 get실행
2019-11-05 09:26:55 [ERROR] - "/board"에 없는 경로
2019-11-05 09:26:55 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 09:26:55 [METHOD] - "/board"에 get실행완료
2019-11-05 09:26:55 [ERROR] - "/board"에 get에서 ERROR : Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
2019-11-05 09:27:48 [METHOD] - "/board"에 get실행
2019-11-05 09:27:48 [ERROR] - "/board"에 없는 경로
2019-11-05 09:27:48 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 09:27:48 [METHOD] - "/board"에 get실행완료
2019-11-05 09:27:48 [ERROR] - "/board"에 get에서 ERROR : Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
2019-11-05 09:28:14 [METHOD] - "/board"에 get실행
2019-11-05 09:28:14 [ERROR] - "/board"에 없는 경로
2019-11-05 09:28:14 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 09:28:14 [METHOD] - "/board"에 get실행완료
2019-11-05 09:28:14 [ERROR] - "/board"에 get에서 ERROR : Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
2019-11-05 09:29:28 [METHOD] - "/board"에 get실행
2019-11-05 09:29:28 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 09:29:28 [METHOD] - "/board"에 get실행완료
2019-11-05 09:29:46 [METHOD] - "/board"에 get실행
2019-11-05 09:29:46 [ERROR] - "/board"에 get에서 ERROR : JsonWebTokenError: jwt malformed
2019-11-05 09:31:10 [METHOD] - "/board"에 get실행
2019-11-05 09:31:10 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 09:31:10 [METHOD] - "/board"에 get실행완료
2019-11-05 09:31:36 [METHOD] - "/board"에 get실행
2019-11-05 09:31:36 [ERROR] - "/board"에 get에서 ERROR : JsonWebTokenError: jwt malformed
2019-11-05 09:35:20 [METHOD] - "/"에 post실행
2019-11-05 09:35:20 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 09:35:20 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 09:35:20 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 09:35:20 [METHOD] - "/"에 post실행 완료
2019-11-05 09:35:21 [METHOD] - "/board"에 get실행
2019-11-05 09:35:21 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 09:35:21 [METHOD] - "/board"에 get실행완료
2019-11-05 09:35:55 [METHOD] - "/board/comment"에 post실행
2019-11-05 09:35:55 [METHOD] - "/board/comment"에 post실행종료
2019-11-05 09:36:05 [METHOD] - "/board/comment"에 post실행
2019-11-05 09:36:05 [METHOD] - "/board/comment"에 post실행종료
2019-11-05 09:36:08 [METHOD] - "/board/comment"에 post실행
2019-11-05 09:36:08 [METHOD] - "/board/comment"에 post실행종료
2019-11-05 09:36:12 [METHOD] - "/board/comment"에 post실행
2019-11-05 09:36:12 [METHOD] - "/board/comment"에 post실행종료
2019-11-05 09:42:34 [METHOD] - "/board"에 get실행
2019-11-05 09:42:34 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 09:42:34 [METHOD] - "/board"에 get실행완료
2019-11-05 09:42:38 [METHOD] - "/company"에 get실행
2019-11-05 09:42:38 [METHOD] - "/company"에 get실행완료
2019-11-05 09:44:47 [METHOD] - "/company"에 get실행
2019-11-05 09:44:47 [METHOD] - "/company"에 get실행완료
2019-11-05 09:44:48 [METHOD] - "/board"에 get실행
2019-11-05 09:44:48 [ERROR] - "/board"에 get에서 ERROR : TypeError: verify.verifyToken is not a function
2019-11-05 09:44:49 [METHOD] - "/company"에 get실행
2019-11-05 09:44:49 [METHOD] - "/company"에 get실행완료
2019-11-05 09:44:50 [METHOD] - "/board"에 get실행
2019-11-05 09:44:50 [ERROR] - "/board"에 get에서 ERROR : TypeError: verify.verifyToken is not a function
2019-11-05 09:45:03 [METHOD] - "/company"에 get실행
2019-11-05 09:45:03 [METHOD] - "/company"에 get실행완료
2019-11-05 09:45:06 [METHOD] - "/company/device"에 get실행
2019-11-05 09:45:06 [QUERY] - SELECT `id`, `name`, `firmVersion`, `isOn`, `createdAt`, `updatedAt` FROM `devices` AS `devices`;
2019-11-05 09:45:06 [METHOD] - "/company/device"에 get실행완료
2019-11-05 09:45:16 [METHOD] - "/board"에 get실행
2019-11-05 09:45:16 [ERROR] - "/board"에 get에서 ERROR : TypeError: verify.verifyToken is not a function
2019-11-05 09:45:19 [METHOD] - "/board"에 get실행
2019-11-05 09:45:19 [ERROR] - "/board"에 get에서 ERROR : TypeError: verify.verifyToken is not a function
2019-11-05 09:45:52 [METHOD] - "/board"에 get실행
2019-11-05 09:45:52 [ERROR] - "/board"에 get에서 ERROR : TypeError: verify.verifyToken is not a function
2019-11-05 09:50:26 [METHOD] - "/board"에 get실행
2019-11-05 09:50:26 [ERROR] - "/board"에 get에서 ERROR : TypeError: verify.verifyToken is not a function
2019-11-05 09:52:16 [METHOD] - "/board"에 get실행
2019-11-05 09:52:16 [ERROR] - "/board"에 get에서 ERROR : TypeError: verify.verifyToken is not a function
2019-11-05 09:57:24 [METHOD] - "/board"에 get실행
2019-11-05 09:57:24 [ERROR] - "/board"에 get에서 ERROR : ReferenceError: jwt is not defined
2019-11-05 09:58:08 [METHOD] - "/board"에 get실행
2019-11-05 09:58:08 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 09:58:08 [METHOD] - "/board"에 get실행완료
2019-11-05 10:00:28 [METHOD] - "/company"에 get실행
2019-11-05 10:00:28 [METHOD] - "/company"에 get실행완료
2019-11-05 10:01:14 [METHOD] - "/company"에 get실행
2019-11-05 10:01:14 [METHOD] - "/company"에 get실행완료
2019-11-05 10:01:46 [METHOD] - "/company"에 get실행
2019-11-05 10:01:46 [METHOD] - "/company"에 get실행완료
2019-11-05 10:04:04 [METHOD] - "/"에 post실행
2019-11-05 10:04:04 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 10:04:04 [ERROR] - "/"에 post에서 ERROR : ReferenceError: userNm is not defined
2019-11-05 10:04:59 [METHOD] - "/"에 post실행
2019-11-05 10:04:59 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 10:04:59 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 10:04:59 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 10:04:59 [METHOD] - "/"에 post실행 완료
2019-11-05 10:05:23 [METHOD] - "/board"에 get실행
2019-11-05 10:05:23 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 10:05:23 [METHOD] - "/board"에 get실행완료
2019-11-05 10:06:58 [METHOD] - "/board/comment"에 post실행
2019-11-05 10:06:58 [METHOD] - "/board/comment"에 post실행종료
2019-11-05 10:07:00 [METHOD] - "/board/comment"에 post실행
2019-11-05 10:07:00 [METHOD] - "/board/comment"에 post실행종료
2019-11-05 10:07:04 [METHOD] - "/board/comment"에 post실행
2019-11-05 10:07:04 [METHOD] - "/board/comment"에 post실행종료
2019-11-05 10:16:41 [METHOD] - "/board/comment"에 post실행
2019-11-05 10:16:41 [METHOD] - "/board/comment"에 post실행종료
2019-11-05 10:24:38 [METHOD] - "/board/detail"에 get실행
2019-11-05 10:24:38 [METHOD] - "/board/detail"에 get실행완료
2019-11-05 10:24:38 [METHOD] - "/board"에 get실행
2019-11-05 10:24:38 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 10:24:38 [METHOD] - "/board"에 get실행완료
2019-11-05 10:24:40 [METHOD] - "/board/comment"에 post실행
2019-11-05 10:24:40 [METHOD] - "/board/comment"에 post실행종료
2019-11-05 10:26:27 [METHOD] - "/board/detail"에 get실행
2019-11-05 10:26:27 [METHOD] - "/board/detail"에 get실행완료
2019-11-05 10:26:27 [METHOD] - "/board"에 get실행
2019-11-05 10:26:27 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 10:26:27 [METHOD] - "/board"에 get실행완료
2019-11-05 10:26:29 [METHOD] - "/board/comment"에 post실행
2019-11-05 10:26:29 [METHOD] - "/board/comment"에 post실행종료
2019-11-05 10:26:43 [METHOD] - "/board"에 post실행
2019-11-05 10:26:43 [QUERY] - INSERT INTO `boards` (`id`,`userId`,`title`,`content`,`hit`,`boardPostId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);
2019-11-05 10:26:43 [QUERY] - INSERT INTO `files` (`id`,`orgName`,`size`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?);
2019-11-05 10:26:43 [QUERY] - INSERT INTO `files` (`id`,`orgName`,`size`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?);
2019-11-05 10:26:43 [QUERY] - INSERT INTO `board_files` (`id`,`boardId`,`fileId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?);
2019-11-05 10:26:43 [QUERY] - INSERT INTO `board_files` (`id`,`boardId`,`fileId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?);
2019-11-05 10:26:44 [METHOD] - "/board/detail"에 get실행
2019-11-05 10:26:44 [METHOD] - "/board/detail"에 get실행완료
2019-11-05 10:26:44 [METHOD] - "/board"에 get실행
2019-11-05 10:26:44 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 10:26:44 [METHOD] - "/board"에 get실행완료
2019-11-05 10:26:54 [METHOD] - "/board/comment"에 post실행
2019-11-05 10:26:54 [METHOD] - "/board/comment"에 post실행종료
2019-11-05 10:32:28 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:32:28 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:32:28 [METHOD] - "/board"에 get실행
2019-11-05 10:32:28 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 10:32:28 [METHOD] - "/board"에 get실행완료
2019-11-05 10:32:33 [METHOD] - "/board/comment"에 post실행
2019-11-05 10:32:33 [METHOD] - "/board/comment"에 post실행종료
2019-11-05 10:32:39 [METHOD] - "/board/comment"에 post실행
2019-11-05 10:32:39 [METHOD] - "/board/comment"에 post실행종료
2019-11-05 10:32:43 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:32:43 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:32:43 [METHOD] - "/board/fileDel"에 delete실행
2019-11-05 10:32:43 [METHOD] - "/board/fileDel"에 delete실행완료
2019-11-05 10:32:43 [METHOD] - "/board"에 put실행
2019-11-05 10:32:43 [QUERY] - UPDATE `boards` SET `title`=?,`content`=?,`updatedAt`=? WHERE `id` = ?
2019-11-05 10:32:43 [METHOD] - "/board"에 put실행완료
2019-11-05 10:32:44 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:32:44 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:32:44 [METHOD] - "/board"에 get실행
2019-11-05 10:32:44 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 10:32:44 [METHOD] - "/board"에 get실행완료
2019-11-05 10:32:47 [METHOD] - "/board/comment"에 post실행
2019-11-05 10:32:47 [METHOD] - "/board/comment"에 post실행종료
2019-11-05 10:33:07 [METHOD] - "/"에 post실행
2019-11-05 10:33:07 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 10:33:07 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 10:33:07 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 10:33:07 [METHOD] - "/"에 post실행 완료
2019-11-05 10:33:09 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:33:09 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:33:09 [METHOD] - "/board"에 get실행
2019-11-05 10:33:09 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 10:33:09 [METHOD] - "/board"에 get실행완료
2019-11-05 10:33:10 [METHOD] - "/board/comment"에 post실행
2019-11-05 10:33:10 [METHOD] - "/board/comment"에 post실행종료
2019-11-05 10:33:15 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:33:15 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:33:15 [METHOD] - "/board/fileDel"에 delete실행
2019-11-05 10:33:15 [METHOD] - "/board/fileDel"에 delete실행완료
2019-11-05 10:33:15 [METHOD] - "/board"에 put실행
2019-11-05 10:33:15 [QUERY] - UPDATE `boards` SET `title`=?,`content`=?,`updatedAt`=? WHERE `id` = ?
2019-11-05 10:33:15 [METHOD] - "/board"에 put실행완료
2019-11-05 10:33:16 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:33:16 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:33:16 [METHOD] - "/board"에 get실행
2019-11-05 10:33:16 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 10:33:16 [METHOD] - "/board"에 get실행완료
2019-11-05 10:33:24 [METHOD] - "/board"에 post실행
2019-11-05 10:33:24 [QUERY] - INSERT INTO `boards` (`id`,`userId`,`title`,`content`,`hit`,`boardPostId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);
2019-11-05 10:33:24 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:33:24 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:33:24 [ERROR] - "/board"에 post에서 ERROR : SequelizeForeignKeyConstraintError: Cannot add or update a child row: a foreign key constraint fails (`node_test`.`boards`, CONSTRAINT `boards_ibfk_1` FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE)
2019-11-05 10:33:25 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:33:25 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:33:25 [METHOD] - "/board"에 get실행
2019-11-05 10:33:25 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 10:33:25 [METHOD] - "/board"에 get실행완료
2019-11-05 10:34:13 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:34:13 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:34:13 [METHOD] - "/board"에 post실행
2019-11-05 10:34:13 [QUERY] - INSERT INTO `boards` (`id`,`userId`,`title`,`content`,`hit`,`boardPostId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);
2019-11-05 10:34:13 [ERROR] - "/board"에 post에서 ERROR : SequelizeForeignKeyConstraintError: Cannot add or update a child row: a foreign key constraint fails (`node_test`.`boards`, CONSTRAINT `boards_ibfk_1` FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE)
2019-11-05 10:34:15 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:34:15 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:34:15 [METHOD] - "/board"에 get실행
2019-11-05 10:34:15 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 10:34:15 [METHOD] - "/board"에 get실행완료
2019-11-05 10:35:33 [METHOD] - "/board"에 post실행
2019-11-05 10:35:33 [QUERY] - INSERT INTO `boards` (`id`,`userId`,`title`,`content`,`hit`,`boardPostId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);
2019-11-05 10:35:33 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:35:33 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:35:33 [ERROR] - "/board"에 post에서 ERROR : SequelizeForeignKeyConstraintError: Cannot add or update a child row: a foreign key constraint fails (`node_test`.`boards`, CONSTRAINT `boards_ibfk_1` FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE)
2019-11-05 10:35:34 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:35:34 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:35:34 [METHOD] - "/board"에 get실행
2019-11-05 10:35:34 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 10:35:34 [METHOD] - "/board"에 get실행완료
2019-11-05 10:37:09 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:37:09 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:37:09 [METHOD] - "/board"에 get실행
2019-11-05 10:37:09 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 10:37:09 [METHOD] - "/board"에 get실행완료
2019-11-05 10:37:33 [METHOD] - "/board"에 post실행
2019-11-05 10:37:33 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:37:33 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:37:33 [QUERY] - INSERT INTO `boards` (`id`,`userId`,`title`,`content`,`hit`,`boardPostId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);
2019-11-05 10:37:33 [ERROR] - "/board"에 post에서 ERROR : SequelizeForeignKeyConstraintError: Cannot add or update a child row: a foreign key constraint fails (`node_test`.`boards`, CONSTRAINT `boards_ibfk_1` FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE)
2019-11-05 10:37:40 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:37:40 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:37:40 [METHOD] - "/board"에 get실행
2019-11-05 10:37:40 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 10:37:40 [METHOD] - "/board"에 get실행완료
2019-11-05 10:39:43 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:39:43 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:39:43 [METHOD] - "/board"에 get실행
2019-11-05 10:39:43 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:39:43 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:39:43 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 10:39:43 [METHOD] - "/board"에 get실행완료
2019-11-05 10:39:56 [METHOD] - "/board"에 post실행
2019-11-05 10:39:56 [QUERY] - INSERT INTO `boards` (`id`,`userId`,`title`,`content`,`hit`,`boardPostId`,`createdAt`,`updatedAt`) VALUES (DEFAULT,?,?,?,?,?,?,?);
2019-11-05 10:39:57 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:39:57 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:39:57 [METHOD] - "/board"에 get실행
2019-11-05 10:39:57 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:39:57 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:39:57 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 10:39:57 [METHOD] - "/board"에 get실행완료
2019-11-05 10:39:58 [METHOD] - "/board/comment"에 post실행
2019-11-05 10:39:58 [METHOD] - "/board/comment"에 post실행종료
2019-11-05 10:40:04 [METHOD] - "/board/fileDel"에 delete실행
2019-11-05 10:40:04 [METHOD] - "/board/fileDel"에 delete실행완료
2019-11-05 10:40:04 [METHOD] - "/board"에 put실행
2019-11-05 10:40:04 [QUERY] - UPDATE `boards` SET `title`=?,`content`=?,`updatedAt`=? WHERE `id` = ?
2019-11-05 10:40:04 [METHOD] - "/board"에 put실행완료
2019-11-05 10:40:06 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:40:06 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:40:06 [METHOD] - "/board"에 get실행
2019-11-05 10:40:06 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:40:06 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:40:06 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 10:40:06 [METHOD] - "/board"에 get실행완료
2019-11-05 10:40:09 [METHOD] - "/board/comment"에 post실행
2019-11-05 10:40:09 [METHOD] - "/board/comment"에 post실행종료
2019-11-05 10:40:11 [METHOD] - "/board"에 delete실행
2019-11-05 10:40:11 [METHOD] - "/board"에 delete실행완료
2019-11-05 10:40:12 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:40:12 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:40:12 [METHOD] - "/board"에 get실행
2019-11-05 10:40:12 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 10:40:12 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 10:40:12 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 10:40:12 [METHOD] - "/board"에 get실행완료
2019-11-05 10:40:17 [METHOD] - "/company"에 get실행
2019-11-05 10:40:17 [METHOD] - "/company"에 get실행완료
2019-11-05 10:43:16 [METHOD] - "/company"에 get실행
2019-11-05 10:43:16 [METHOD] - "/company"에 get실행완료
2019-11-05 10:43:51 [METHOD] - "/"에 post실행
2019-11-05 10:43:51 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 10:43:51 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 10:43:51 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 10:43:51 [METHOD] - "/"에 post실행 완료
2019-11-05 10:46:13 [METHOD] - "/"에 post실행
2019-11-05 10:46:13 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 10:46:13 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 10:46:13 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 10:46:13 [METHOD] - "/"에 post실행 완료
2019-11-05 10:46:13 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 10:46:13 [ERROR] - "/company/getInfo"에 get에서 ERROR : JsonWebTokenError: jwt malformed
2019-11-05 10:48:37 [METHOD] - "/"에 post실행
2019-11-05 10:48:37 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 10:48:37 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 10:48:37 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 10:48:37 [METHOD] - "/"에 post실행 완료
2019-11-05 10:50:06 [METHOD] - "/"에 post실행
2019-11-05 10:50:06 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 10:50:06 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 10:50:06 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 10:50:06 [METHOD] - "/"에 post실행 완료
2019-11-05 10:50:06 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 10:50:06 [METHOD] - "/company/getInfo"에 get실행완료
2019-11-05 10:53:51 [METHOD] - "/"에 post실행
2019-11-05 10:53:51 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 10:53:51 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 10:53:51 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 10:53:51 [METHOD] - "/"에 post실행 완료
2019-11-05 10:53:51 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 10:53:51 [METHOD] - "/company/getInfo"에 get실행완료
2019-11-05 10:55:22 [METHOD] - "/"에 post실행
2019-11-05 10:55:22 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 10:55:22 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 10:55:22 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 10:55:22 [METHOD] - "/"에 post실행 완료
2019-11-05 10:55:22 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 10:55:22 [ERROR] - "/company/getInfo"에 get에서 ERROR : TypeError: User_group.fineOne is not a function
2019-11-05 10:57:22 [METHOD] - "/"에 post실행
2019-11-05 10:57:22 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 10:57:22 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 10:57:22 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 10:57:22 [METHOD] - "/"에 post실행 완료
2019-11-05 10:57:22 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 10:57:22 [METHOD] - "/company/getInfo"에 get실행완료
2019-11-05 11:02:46 [METHOD] - "/company"에 get실행
2019-11-05 11:02:46 [METHOD] - "/company"에 get실행완료
2019-11-05 11:02:52 [METHOD] - "/"에 post실행
2019-11-05 11:02:52 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 11:02:52 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 11:02:52 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 11:02:52 [METHOD] - "/"에 post실행 완료
2019-11-05 11:02:52 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 11:02:52 [METHOD] - "/company/getInfo"에 get실행완료
2019-11-05 11:02:53 [METHOD] - "/company"에 get실행
2019-11-05 11:02:53 [METHOD] - "/company"에 get실행완료
2019-11-05 11:03:08 [METHOD] - "/"에 post실행
2019-11-05 11:03:08 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 11:03:08 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 11:03:08 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 11:03:08 [METHOD] - "/"에 post실행 완료
2019-11-05 11:03:08 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 11:03:08 [METHOD] - "/company/getInfo"에 get실행완료
2019-11-05 11:06:00 [METHOD] - "/"에 post실행
2019-11-05 11:06:00 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 11:06:00 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 11:06:00 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 11:06:00 [METHOD] - "/"에 post실행 완료
2019-11-05 11:06:00 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 11:06:00 [METHOD] - "/company/getInfo"에 get실행완료
2019-11-05 11:06:50 [METHOD] - "/"에 post실행
2019-11-05 11:06:50 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 11:06:50 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 11:06:50 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 11:06:50 [METHOD] - "/"에 post실행 완료
2019-11-05 11:06:50 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 11:06:50 [ERROR] - "/company/getInfo"에 get에서 ERROR : TypeError: Cannot read property 'groupAuth' of undefined
2019-11-05 11:07:22 [METHOD] - "/"에 post실행
2019-11-05 11:07:22 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 11:07:22 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 11:07:22 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 11:07:22 [METHOD] - "/"에 post실행 완료
2019-11-05 11:07:22 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 11:07:22 [ERROR] - "/company/getInfo"에 get에서 ERROR : TypeError: Cannot read property 'dataValues' of undefined
2019-11-05 11:07:32 [METHOD] - "/"에 post실행
2019-11-05 11:07:32 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 11:07:32 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 11:07:32 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 11:07:32 [METHOD] - "/"에 post실행 완료
2019-11-05 11:07:32 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 11:07:32 [METHOD] - "/company/getInfo"에 get실행완료
2019-11-05 11:07:44 [METHOD] - "/"에 post실행
2019-11-05 11:07:44 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 11:07:44 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 11:07:44 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 11:07:44 [METHOD] - "/"에 post실행 완료
2019-11-05 11:07:44 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 11:07:44 [METHOD] - "/company/getInfo"에 get실행완료
2019-11-05 11:08:03 [METHOD] - "/"에 post실행
2019-11-05 11:08:03 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 11:08:03 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 11:08:03 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 11:08:03 [METHOD] - "/"에 post실행 완료
2019-11-05 11:08:03 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 11:08:03 [METHOD] - "/company/getInfo"에 get실행완료
2019-11-05 11:08:14 [METHOD] - "/"에 post실행
2019-11-05 11:08:14 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 11:08:14 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 11:08:14 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 11:08:14 [METHOD] - "/"에 post실행 완료
2019-11-05 11:08:14 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 11:08:14 [METHOD] - "/company/getInfo"에 get실행완료
2019-11-05 11:08:43 [METHOD] - "/"에 post실행
2019-11-05 11:08:43 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 11:08:43 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 11:08:43 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 11:08:43 [METHOD] - "/"에 post실행 완료
2019-11-05 11:08:43 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 11:08:43 [METHOD] - "/company/getInfo"에 get실행완료
2019-11-05 11:09:20 [METHOD] - "/"에 post실행
2019-11-05 11:09:20 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 11:09:20 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 11:09:20 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 11:09:20 [METHOD] - "/"에 post실행 완료
2019-11-05 11:09:20 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 11:09:20 [METHOD] - "/company/getInfo"에 get실행완료
2019-11-05 11:09:29 [METHOD] - "/"에 post실행
2019-11-05 11:09:29 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 11:09:29 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 11:09:29 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 11:09:29 [METHOD] - "/"에 post실행 완료
2019-11-05 11:09:29 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 11:09:29 [METHOD] - "/company/getInfo"에 get실행완료
2019-11-05 11:09:56 [METHOD] - "/"에 post실행
2019-11-05 11:09:56 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 11:09:56 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 11:09:56 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 11:09:56 [METHOD] - "/"에 post실행 완료
2019-11-05 11:09:56 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 11:09:56 [METHOD] - "/company/getInfo"에 get실행완료
2019-11-05 11:10:38 [METHOD] - "/"에 post실행
2019-11-05 11:10:38 [METHOD] - "/"에 signToken메소드 실행
2019-11-05 11:10:38 [METHOD] - "/"에 signToken메소드 실행완료
2019-11-05 11:10:38 [NOTICE] - ORG_ID : asdf 로그인
2019-11-05 11:10:38 [METHOD] - "/"에 post실행 완료
2019-11-05 11:10:38 [METHOD] - "/company/getInfo"에 get실행
2019-11-05 11:10:38 [METHOD] - "/company/getInfo"에 get실행완료
2019-11-05 11:15:21 [METHOD] - "/company"에 get실행
2019-11-05 11:15:21 [METHOD] - "/company"에 get실행완료
2019-11-05 11:15:22 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 11:15:22 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 11:15:22 [METHOD] - "/board"에 get실행
2019-11-05 11:15:22 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 11:15:22 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 11:15:22 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 11:15:22 [METHOD] - "/board"에 get실행완료
2019-11-05 11:15:42 [METHOD] - "/company"에 get실행
2019-11-05 11:15:42 [METHOD] - "/company"에 get실행완료
2019-11-05 11:15:43 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 11:15:43 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 11:15:43 [METHOD] - "/board"에 get실행
2019-11-05 11:15:44 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 11:15:44 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 11:15:44 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 11:15:44 [METHOD] - "/board"에 get실행완료
2019-11-05 11:15:44 [METHOD] - "/company"에 get실행
2019-11-05 11:15:44 [METHOD] - "/company"에 get실행완료
2019-11-05 11:15:45 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 11:15:45 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 11:15:45 [METHOD] - "/board"에 get실행
2019-11-05 11:15:45 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 11:15:45 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 11:15:45 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 11:15:45 [METHOD] - "/board"에 get실행완료
2019-11-05 11:15:46 [METHOD] - "/company"에 get실행
2019-11-05 11:15:46 [METHOD] - "/company"에 get실행완료
2019-11-05 11:15:48 [METHOD] - "/company"에 get실행
2019-11-05 11:15:48 [METHOD] - "/company"에 get실행완료
2019-11-05 11:15:49 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 11:15:49 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 11:15:49 [METHOD] - "/board"에 get실행
2019-11-05 11:15:49 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 11:15:49 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 11:15:49 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 11:15:49 [METHOD] - "/board"에 get실행완료
2019-11-05 11:15:49 [METHOD] - "/company"에 get실행
2019-11-05 11:15:49 [METHOD] - "/company"에 get실행완료
2019-11-05 11:15:52 [METHOD] - "/company"에 get실행
2019-11-05 11:15:52 [METHOD] - "/company"에 get실행완료
2019-11-05 11:15:53 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 11:15:53 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 11:15:53 [METHOD] - "/board"에 get실행
2019-11-05 11:15:53 [METHOD] - "/board/getInfo"에 get실행
2019-11-05 11:15:53 [METHOD] - "/board/getInfo"에 get실행완료
2019-11-05 11:15:53 [QUERY] - SELECT `boards`.`id`, `boards`.`userId`, `boards`.`title`, `boards`.`content`, `boards`.`hit`, `boards`.`boardPostId`, `boards`.`createdAt`, `boards`.`updatedAt`, `board_post`.`id` AS `board_post.id`, `board_post`.`name` AS `board_post.name`, `board_post`.`createdAt` AS `board_post.createdAt`, `board_post`.`updatedAt` AS `board_post.updatedAt`, `user`.`id` AS `user.id`, `user`.`orgId` AS `user.orgId`, `user`.`userNm` AS `user.userNm`, `user`.`userPw` AS `user.userPw`, `user`.`userYn` AS `user.userYn`, `user`.`userGroupId` AS `user.userGroupId`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `board_files`.`id` AS `board_files.id`, `board_files`.`boardId` AS `board_files.boardId`, `board_files`.`fileId` AS `board_files.fileId`, `board_files`.`createdAt` AS `board_files.createdAt`, `board_files`.`updatedAt` AS `board_files.updatedAt`, `board_files->file`.`id` AS `board_files.file.id`, `board_files->file`.`orgName` AS `board_files.file.orgName`, `board_files->file`.`size` AS `board_files.file.size`, `board_files->file`.`createdAt` AS `board_files.file.createdAt`, `board_files->file`.`updatedAt` AS `board_files.file.updatedAt` FROM `boards` AS `boards` LEFT OUTER JOIN `board_posts` AS `board_post` ON `boards`.`boardPostId` = `board_post`.`id` LEFT OUTER JOIN `users` AS `user` ON `boards`.`userId` = `user`.`id` LEFT OUTER JOIN `board_files` AS `board_files` ON `boards`.`id` = `board_files`.`boardId` LEFT OUTER JOIN `files` AS `board_files->file` ON `board_files`.`fileId` = `board_files->file`.`id`;
2019-11-05 11:15:53 [METHOD] - "/board"에 get실행완료
